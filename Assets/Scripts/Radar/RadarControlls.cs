//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Radar/RadarControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RadarControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RadarControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RadarControlls"",
    ""maps"": [
        {
            ""name"": ""RadarControlls"",
            ""id"": ""7268cc5c-bfe7-4463-ade7-f3883732fb30"",
            ""actions"": [
                {
                    ""name"": ""SelectArea"",
                    ""type"": ""Button"",
                    ""id"": ""7a9eca8d-9280-4b2a-9f4b-6028d6534cb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextTarget"",
                    ""type"": ""Button"",
                    ""id"": ""9aef3964-78ec-45bb-bde5-3456fd615375"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4ac2e3d-771c-4609-b471-814ffbf9c1ab"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""SelectArea"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50c603db-2603-4eea-b1a6-8c16fb33f72b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SelectArea"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff9130dd-480a-4b5f-94e3-11d4e6530d21"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""NextTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77340541-e85c-406a-a1f6-733f07c54ec4"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""NextTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": []
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // RadarControlls
        m_RadarControlls = asset.FindActionMap("RadarControlls", throwIfNotFound: true);
        m_RadarControlls_SelectArea = m_RadarControlls.FindAction("SelectArea", throwIfNotFound: true);
        m_RadarControlls_NextTarget = m_RadarControlls.FindAction("NextTarget", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RadarControlls
    private readonly InputActionMap m_RadarControlls;
    private List<IRadarControllsActions> m_RadarControllsActionsCallbackInterfaces = new List<IRadarControllsActions>();
    private readonly InputAction m_RadarControlls_SelectArea;
    private readonly InputAction m_RadarControlls_NextTarget;
    public struct RadarControllsActions
    {
        private @RadarControl m_Wrapper;
        public RadarControllsActions(@RadarControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectArea => m_Wrapper.m_RadarControlls_SelectArea;
        public InputAction @NextTarget => m_Wrapper.m_RadarControlls_NextTarget;
        public InputActionMap Get() { return m_Wrapper.m_RadarControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RadarControllsActions set) { return set.Get(); }
        public void AddCallbacks(IRadarControllsActions instance)
        {
            if (instance == null || m_Wrapper.m_RadarControllsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RadarControllsActionsCallbackInterfaces.Add(instance);
            @SelectArea.started += instance.OnSelectArea;
            @SelectArea.performed += instance.OnSelectArea;
            @SelectArea.canceled += instance.OnSelectArea;
            @NextTarget.started += instance.OnNextTarget;
            @NextTarget.performed += instance.OnNextTarget;
            @NextTarget.canceled += instance.OnNextTarget;
        }

        private void UnregisterCallbacks(IRadarControllsActions instance)
        {
            @SelectArea.started -= instance.OnSelectArea;
            @SelectArea.performed -= instance.OnSelectArea;
            @SelectArea.canceled -= instance.OnSelectArea;
            @NextTarget.started -= instance.OnNextTarget;
            @NextTarget.performed -= instance.OnNextTarget;
            @NextTarget.canceled -= instance.OnNextTarget;
        }

        public void RemoveCallbacks(IRadarControllsActions instance)
        {
            if (m_Wrapper.m_RadarControllsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRadarControllsActions instance)
        {
            foreach (var item in m_Wrapper.m_RadarControllsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RadarControllsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RadarControllsActions @RadarControlls => new RadarControllsActions(this);
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IRadarControllsActions
    {
        void OnSelectArea(InputAction.CallbackContext context);
        void OnNextTarget(InputAction.CallbackContext context);
    }
}
